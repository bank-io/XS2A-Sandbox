--- # ------------------------------------------------------------------

# ------------------------------------------------------------------
# Global settings
image: "adorsys/ci-build:latest"

# ------------------------------------------------------------------
# stages
# ------------------------------------------------------------------

stages:
  - "Lint"
  - "Compile" # build jar and provide as artifact
  - "Test" # run tests and code quality checks
  - "Package" # dockerize jar and push to docker registry
  - "Deploy" # push to openshift registry
  - "release" # release

# ------------------------------------------------------------------
# variables
# ------------------------------------------------------------------

variables:
  SONAR_HOST: "https://psd2-quality.cloud.adorsys.de"

  GIT_SUBMODULE_STRATEGY: normal
  # Online banking
  DOCKER_IMAGE_NAME_XS2A_ONLINE_BANKING: "xs2a-online-banking"
  DOCKER_IMAGE_NAME_XS2A_CERTIFICATE_GENERATOR: "xs2a-certificate-generator"
  DOCKER_IMAGE_NAME_XS2A_ONLINE_BANKING_UI: "xs2a-online-banking-ui"
  DOCKER_IMAGE_NAME_XS2A_TPP_UI: "xs2a-bank-tpp-ui"
  DOCKER_IMAGE_NAME_XS2A_DEVPORTAL_UI: "xs2a-bank-devportal"
  DOCKER_IMAGE_NAME_XS2A_TPP_REST_SERVER: "xs2a-tpp-rest-server"

  ###########################
  # Public Dockerhub Images #
  ###########################

  DOCKERHUB_REGISTRY: "docker.io"

  DOCKERHUB_NAMESPACE: "adorsys"

  ############################
  # Private Openshift Images #
  ############################

  OPENSHIFT_NAMESPACE_DEV: "adorsys-dynamic-sandbox-dev"
  OPENSHIFT_NAMESPACE_INTEG: "adorsys-dynamic-sandbox-integ"
  OPENSHIFT_NAMESPACE_DEMO: "adorsys-dynamic-sandbox-demo"

  OPENSHIFT_NAMESPACE_BANKING_GATEWAY_DEV: "banking-gateway-dev"
  OPENSHIFT_NAMESPACE_BANKING_GATEWAY_INTEG: "banking-gateway-integ"

  OPENSHIFT_NAMESPACE_ASPSP_XS2A_DEV: "adorsys-psd2-develop"

  OPENSHIFT_NAMESPACE_DXC_SANDBOX_DEV: "dxc-sandbox-dev"
  OPENSHIFT_NAMESPACE_BEKB_SANDBOX_DEV: "bekb-sandbox-dev"

  OPENSHIFT_NAMESPACE_OPEN_BANKING_GATEWAY_DEV: "open-banking-gateway-dev"

  OPENSHIFT_NAMESPACE_DEV_E2E: "adorsys-dynamic-sandbox-dev-e2e"

  ###########################
  # Build variables         #
  ###########################

  # Defaults for Java 11
  JAVA_TOOL_OPTIONS: "-XX:+UnlockExperimentalVMOptions -XX:MaxRAM=3G -XX:MaxRAMFraction=3"
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"

# ------------------------------------------------------------------
# reusable yaml anchors
# ------------------------------------------------------------------

.build_java: &build_java
  stage: "Compile"
  script:
    - jabba use $BUILD_JAVA_VERSION
    - cat /sys/fs/cgroup/memory/memory.limit_in_bytes
    - java -XX:+PrintFlagsFinal -version | grep -Ei "maxheapsize|maxram"
    - make build-java-services
  cache:
    key: "Java_${CI_COMMIT_REF_SLUG}"
    paths:
      - /builds/adorsys/xs2a/psd2-dynamic-sandbox/.m2/repository

# Build docker images and put them to DOCKER HUB repo
.build_docker_images: &build_docker_images
  script:
    - docker build -t "${DOCKERHUB_REGISTRY}/${DOCKERHUB_NAMESPACE}/${DOCKER_IMAGE_NAME_XS2A_ONLINE_BANKING}:${DOCKER_TAG}" online-banking/online-banking-app
    - docker build -t "${DOCKERHUB_REGISTRY}/${DOCKERHUB_NAMESPACE}/${DOCKER_IMAGE_NAME_XS2A_ONLINE_BANKING_UI}:${DOCKER_TAG}" oba-ui
    - docker build -t "${DOCKERHUB_REGISTRY}/${DOCKERHUB_NAMESPACE}/${DOCKER_IMAGE_NAME_XS2A_CERTIFICATE_GENERATOR}:${DOCKER_TAG}" certificate-generator
    - docker build -t "${DOCKERHUB_REGISTRY}/${DOCKERHUB_NAMESPACE}/${DOCKER_IMAGE_NAME_XS2A_TPP_REST_SERVER}:${DOCKER_TAG}" tpp-app/tpp-rest-server
    - docker build -t "${DOCKERHUB_REGISTRY}/${DOCKERHUB_NAMESPACE}/${DOCKER_IMAGE_NAME_XS2A_TPP_UI}:${DOCKER_TAG}" tpp-ui
    - docker build -t "${DOCKERHUB_REGISTRY}/${DOCKERHUB_NAMESPACE}/${DOCKER_IMAGE_NAME_XS2A_DEVPORTAL_UI}:${DOCKER_TAG}" developer-portal-ui

.push_dockerhub_images: &push_dockerhub_images
  script:
    - docker build -t "${DOCKERHUB_REGISTRY}/${DOCKERHUB_NAMESPACE}/${DOCKER_IMAGE_NAME_XS2A_ONLINE_BANKING}:${DOCKER_TAG}" online-banking/online-banking-app
    - docker build -t "${DOCKERHUB_REGISTRY}/${DOCKERHUB_NAMESPACE}/${DOCKER_IMAGE_NAME_XS2A_ONLINE_BANKING_UI}:${DOCKER_TAG}" oba-ui
    - docker build -t "${DOCKERHUB_REGISTRY}/${DOCKERHUB_NAMESPACE}/${DOCKER_IMAGE_NAME_XS2A_CERTIFICATE_GENERATOR}:${DOCKER_TAG}" certificate-generator
    - docker build -t "${DOCKERHUB_REGISTRY}/${DOCKERHUB_NAMESPACE}/${DOCKER_IMAGE_NAME_XS2A_TPP_REST_SERVER}:${DOCKER_TAG}" tpp-app/tpp-rest-server
    - docker build -t "${DOCKERHUB_REGISTRY}/${DOCKERHUB_NAMESPACE}/${DOCKER_IMAGE_NAME_XS2A_TPP_UI}:${DOCKER_TAG}" tpp-ui
    - docker build -t "${DOCKERHUB_REGISTRY}/${DOCKERHUB_NAMESPACE}/${DOCKER_IMAGE_NAME_XS2A_DEVPORTAL_UI}:${DOCKER_TAG}" developer-portal-ui

    - docker login -u $DOCKER_HUB_LOGIN -p $DOCKER_HUB_PASS
    - docker push "${DOCKERHUB_REGISTRY}/${DOCKERHUB_NAMESPACE}/${DOCKER_IMAGE_NAME_XS2A_ONLINE_BANKING}:${DOCKER_TAG}"
    - docker push "${DOCKERHUB_REGISTRY}/${DOCKERHUB_NAMESPACE}/${DOCKER_IMAGE_NAME_XS2A_ONLINE_BANKING_UI}:${DOCKER_TAG}"
    - docker push "${DOCKERHUB_REGISTRY}/${DOCKERHUB_NAMESPACE}/${DOCKER_IMAGE_NAME_XS2A_CERTIFICATE_GENERATOR}:${DOCKER_TAG}"
    - docker push  "${DOCKERHUB_REGISTRY}/${DOCKERHUB_NAMESPACE}/${DOCKER_IMAGE_NAME_XS2A_TPP_REST_SERVER}:${DOCKER_TAG}"
    - docker push "${DOCKERHUB_REGISTRY}/${DOCKERHUB_NAMESPACE}/${DOCKER_IMAGE_NAME_XS2A_TPP_UI}:${DOCKER_TAG}"
    - docker push "${DOCKERHUB_REGISTRY}/${DOCKERHUB_NAMESPACE}/${DOCKER_IMAGE_NAME_XS2A_DEVPORTAL_UI}:${DOCKER_TAG}"
    - docker logout

#Copy Dockerhub TPP rest server image to Openshift (depending on ${DOCKER_TAG})
.deploy_openshift_tpp_rest_server: &deploy_openshift_tpp_rest_server
  script:
    - >-
      skopeo copy
      --dest-creds=openshift:${OPENSHIFT_TOKEN}
      "docker://${DOCKERHUB_REGISTRY}/${DOCKERHUB_NAMESPACE}/${DOCKER_IMAGE_NAME_XS2A_TPP_REST_SERVER}:${DOCKER_TAG}"
      "docker://${OPENSHIFT_REGISTRY}/${OPENSHIFT_NAMESPACE}/${DOCKER_IMAGE_NAME_XS2A_TPP_REST_SERVER}:latest"

# Copy Dockerhub images to Openshift (depending on ${DOCKER_TAG})
.deploy_openshift: &deploy_openshift
  script:
    - >-
      skopeo copy
      --dest-creds=openshift:${OPENSHIFT_TOKEN}
      "docker://${DOCKERHUB_REGISTRY}/${DOCKERHUB_NAMESPACE}/${DOCKER_IMAGE_NAME_XS2A_ONLINE_BANKING}:${DOCKER_TAG}"
      "docker://${OPENSHIFT_REGISTRY}/${OPENSHIFT_NAMESPACE}/${DOCKER_IMAGE_NAME_XS2A_ONLINE_BANKING}:latest"
    - >-
      skopeo copy
      --dest-creds=openshift:${OPENSHIFT_TOKEN}
      "docker://${DOCKERHUB_REGISTRY}/${DOCKERHUB_NAMESPACE}/${DOCKER_IMAGE_NAME_XS2A_ONLINE_BANKING_UI}:${DOCKER_TAG}"
      "docker://${OPENSHIFT_REGISTRY}/${OPENSHIFT_NAMESPACE}/${DOCKER_IMAGE_NAME_XS2A_ONLINE_BANKING_UI}:latest"
    - >-
      skopeo copy
      --dest-creds=openshift:${OPENSHIFT_TOKEN}
      "docker://${DOCKERHUB_REGISTRY}/${DOCKERHUB_NAMESPACE}/${DOCKER_IMAGE_NAME_XS2A_CERTIFICATE_GENERATOR}:${DOCKER_TAG}"
      "docker://${OPENSHIFT_REGISTRY}/${OPENSHIFT_NAMESPACE}/${DOCKER_IMAGE_NAME_XS2A_CERTIFICATE_GENERATOR}:latest"
    - >-
      skopeo copy
      --dest-creds=openshift:${OPENSHIFT_TOKEN}
      "docker://${DOCKERHUB_REGISTRY}/${DOCKERHUB_NAMESPACE}/${DOCKER_IMAGE_NAME_XS2A_TPP_REST_SERVER}:${DOCKER_TAG}"
      "docker://${OPENSHIFT_REGISTRY}/${OPENSHIFT_NAMESPACE}/${DOCKER_IMAGE_NAME_XS2A_TPP_REST_SERVER}:latest"
    - >-
      skopeo copy
      --dest-creds=openshift:${OPENSHIFT_TOKEN}
      "docker://${DOCKERHUB_REGISTRY}/${DOCKERHUB_NAMESPACE}/${DOCKER_IMAGE_NAME_XS2A_TPP_UI}:${DOCKER_TAG}"
      "docker://${OPENSHIFT_REGISTRY}/${OPENSHIFT_NAMESPACE}/${DOCKER_IMAGE_NAME_XS2A_TPP_UI}:latest"
    - >-
      skopeo copy
      --dest-creds=openshift:${OPENSHIFT_TOKEN}
      "docker://${DOCKERHUB_REGISTRY}/${DOCKERHUB_NAMESPACE}/${DOCKER_IMAGE_NAME_XS2A_DEVPORTAL_UI}:${DOCKER_TAG}"
      "docker://${OPENSHIFT_REGISTRY}/${OPENSHIFT_NAMESPACE}/${DOCKER_IMAGE_NAME_XS2A_DEVPORTAL_UI}:latest"

.deploy_dxc_openshift: &deploy_dxc_openshift
  script:
    - >-
      skopeo copy
      --dest-creds=openshift:${OPENSHIFT_TOKEN}
      "docker://${DOCKERHUB_REGISTRY}/${DOCKERHUB_NAMESPACE}/${DOCKER_IMAGE_NAME_XS2A_CERTIFICATE_GENERATOR}:${DOCKER_TAG}"
      "docker://${OPENSHIFT_REGISTRY}/${OPENSHIFT_NAMESPACE}/${DOCKER_IMAGE_NAME_XS2A_CERTIFICATE_GENERATOR}:latest"
    - >-
      skopeo copy
      --dest-creds=openshift:${OPENSHIFT_TOKEN}
      "docker://${DOCKERHUB_REGISTRY}/${DOCKERHUB_NAMESPACE}/${DOCKER_IMAGE_NAME_XS2A_TPP_REST_SERVER}:${DOCKER_TAG}"
      "docker://${OPENSHIFT_REGISTRY}/${OPENSHIFT_NAMESPACE}/${DOCKER_IMAGE_NAME_XS2A_TPP_REST_SERVER}:latest"

# ------------------------------------------------------------------
# jobs
# ------------------------------------------------------------------

#-------------------------------------------------------------------
# lint
#-------------------------------------------------------------------
Lint:OBA_frontend:
  image: node:12.16.2-stretch-slim
  stage: "Lint"
  except:
    - schedules
    - develop
    - master
  script:
    - apt-get update && apt-get install jsonlint yamllint libxml2-utils make curl -yq && ln -s /usr/bin/jsonlint-php /usr/bin/jsonlint
    - curl -fsSL https://get.docker.com -o get-docker.sh && sh get-docker.sh
    - echo "Run OBA lint"
    - make lint-oba-ui

Lint:TPP_frontend:
  image: node:12.16.2-stretch-slim
  stage: "Lint"
  except:
    - schedules
    - develop
    - master
  script:
    - apt-get update && apt-get install jsonlint yamllint libxml2-utils make curl -yq && ln -s /usr/bin/jsonlint-php /usr/bin/jsonlint
    - curl -fsSL https://get.docker.com -o get-docker.sh && sh get-docker.sh
    - echo "Run TPP lint"
    - make lint-tpp-ui

Lint:Devportal_frontend:
  image: node:12.16.2-stretch-slim
  stage: "Lint"
  except:
    - schedules
    - develop
    - master
  script:
    - apt-get update && apt-get install jsonlint yamllint libxml2-utils make curl -yq && ln -s /usr/bin/jsonlint-php /usr/bin/jsonlint
    - curl -fsSL https://get.docker.com -o get-docker.sh && sh get-docker.sh
    - echo "Run Devportal frontend lint"
    - make lint-developer-portal-ui

Lint:OBA_backend:
  image: debian:stretch-slim
  stage: "Lint"
  except:
    - schedules
    - develop
    - master
  script:
    - apt-get update && apt-get install jsonlint yamllint libxml2-utils make curl -yq && ln -s /usr/bin/jsonlint-php /usr/bin/jsonlint
    - curl -fsSL https://get.docker.com -o get-docker.sh && sh get-docker.sh
    - echo "Run OBA backend lint"
    - make lint-online-banking

Lint:TPP_backend:
  image: debian:stretch-slim
  stage: "Lint"
  except:
    - schedules
    - develop
    - master
  script:
    - apt-get update && apt-get install jsonlint yamllint libxml2-utils make curl -yq && ln -s /usr/bin/jsonlint-php /usr/bin/jsonlint
    - curl -fsSL https://get.docker.com -o get-docker.sh && sh get-docker.sh
    - echo "Run TPP backend lint"
    - make lint-tpp-rest-server

Lint:Certificate_generator:
  image: debian:stretch-slim
  stage: "Lint"
  except:
    - schedules
    - develop
    - master
  script:
    - apt-get update && apt-get install jsonlint yamllint libxml2-utils make curl -yq && ln -s /usr/bin/jsonlint-php /usr/bin/jsonlint
    - curl -fsSL https://get.docker.com -o get-docker.sh && sh get-docker.sh
    - echo "Run Certificate generator lint"
    - make lint-certificate-generator

Lint:Docker_compose:
  image: maven:3.6-jdk-11-slim
  stage: "Lint"
  except:
    - schedules
    - develop
    - master
  script:
    - apt update && apt install yamllint docker-compose make -yq
    - echo "Run Docker compose lint"
    - make lint-docker-compose

Build:OBA_frontend:
  image: node:12.16.2-stretch-slim
  stage: "Compile"
  except:
    - schedules
  script:
    - apt-get update && apt-get install make -yq
    - echo "Run OBA frontend  Build"
    - make npm-install-oba-ui
  cache: {}
  artifacts:
    paths:
      - "oba-ui/dist"
    name: "$CI_PROJECT_NAME-${CI_BUILD_REF_NAME#*v}"
    expire_in: "1 day"

Build:TPP_frontend:
  image: node:12.16.2-stretch-slim
  stage: "Compile"
  except:
    - schedules
  script:
    - apt-get update && apt-get install make -yq
    - echo "Run TPP frontend  Build"
    - make npm-install-tpp-ui
  cache: {}
  artifacts:
    paths:
      - "tpp-ui/dist"
    name: "$CI_PROJECT_NAME-${CI_BUILD_REF_NAME#*v}"
    expire_in: "1 day"

Build:Devportal_frontend:
  image: node:12.16.2-stretch-slim
  stage: "Compile"
  except:
    - schedules
  script:
    - apt-get update && apt-get install zip make -yq
    - echo "Update postman test files "
    - scripts/.update-postman-test-files.sh
    - echo "Run Devportal frontend Build"
    - make npm-install-developer-portal-ui
  cache: {}
  artifacts:
    paths:
      - "developer-portal-ui/dist"
    name: "$CI_PROJECT_NAME-${CI_BUILD_REF_NAME#*v}"
    expire_in: "1 day"

Build:Java11:
  <<: *build_java
  except:
    - schedules
  cache: {}
  variables:
    BUILD_JAVA_VERSION: system@1.11
    JAVA_TOOL_OPTIONS: "-Djavax.net.ssl.trustStorePassword=changeit -XX:MaxRAM=3G"
  artifacts:
    paths:
      - "online-banking/online-banking-app/target/online-banking-app.jar"
      - "certificate-generator/target/certificate-generator.jar"
      - "tpp-app/tpp-rest-server/target/tpp-rest-server.jar"
    name: "$CI_PROJECT_NAME-${CI_BUILD_REF_NAME#*v}"
    expire_in: "1 day"

Lint:PMD_CPD_Report:
  image: maven:3.6-jdk-11-slim
  stage: "Lint"
  except:
    - schedules
    - develop
    - master
  script:
    - apt update && apt install make -yq
    - echo "Test java code for PMD and CPD"
    - make lint-pmd-cpd-report
  cache: {}
  artifacts:
    paths:
      - "qa/pmd/pmd-ruleset.xml"
      - "**/**/*/pmd.html"
      - "**/*/pmd.xml"
    name: "${CI_PROJECT_NAME}-${CI_BUILD_REF_NAME#*v}-pmd"
    expire_in: "10 day"

Doc Check Java11:
  stage: "Test"
  except:
    - schedules
    - develop
  needs: ["Build:Java11"]
  variables:
    JAVA_TOOL_OPTIONS: "-Djavax.net.ssl.trustStorePassword=changeit -XX:MaxRAM=3G"
    JAVA_VERSION: "system@1.11"
  script:
    - jabba use ${JAVA_VERSION}
    - cat /sys/fs/cgroup/memory/memory.limit_in_bytes
    - java -XX:+PrintFlagsFinal -version | grep -Ei "maxheapsize|maxram"
    - mvn -ntp -Dmaven.test.skip=true -Pjavadoc verify javadoc:javadoc

UnitTests:Java11:
  image: maven:3.6-jdk-11-slim
  stage: "Test"
  except:
    - schedules
    - develop
  needs: ["Build:Java11"]
  variables:
    JAVA_VERSION: "system@1.11"
    JAVA_TOOL_OPTIONS: "-Djavax.net.ssl.trustStorePassword=changeit -XX:MaxRAM=3G"
  script:
    - apt update && apt install make -yq
    - echo "Run unit tests for backend"
    - make unit-tests-backend

UnitTests:DevPortal_frontend:
  image: node:12.16.2-stretch-slim
  stage: "Test"
  except:
    - schedules
  needs: ["Build:Devportal_frontend"]
  variables:
    CHROME_BIN: "/usr/bin/chromium"
  script:
    - apt-get update && apt-get install make chromium chromium-l10n -yq
    - echo 'Unit tests Devportal frontend'
    - make unit-tests-developer-portal-ui

UnitTests:TPP_frontend:
  image: node:12.16.2-stretch-slim
  stage: "Test"
  except:
    - schedules
  needs: ["Build:TPP_frontend"]
  variables:
    CHROME_BIN: "/usr/bin/chromium"
  script:
    - apt-get update && apt-get install make chromium chromium-l10n -yq
    - echo 'Unit tests TPP frontend'
    - make unit-tests-tpp-ui

UnitTests:OBA_frontend:
  image: node:12.16.2-stretch-slim
  stage: "Test"
  except:
    - schedules
  needs: ["Build:OBA_frontend"]
  variables:
    CHROME_BIN: "/usr/bin/chromium"
  script:
    - apt-get update && apt-get install make chromium chromium-l10n -yq
    - echo 'Unit tests OBA frontend'
    - make unit-tests-oba-ui

Test:Build_docker_images:
  stage: "Test"
  except:
    - schedules
  needs:
    [
      "Build:OBA_frontend",
      "Build:TPP_frontend",
      "Build:Devportal_frontend",
      "Build:Java11",
    ]
  variables:
    DOCKER_TAG: test
  <<: *build_docker_images

Postman Tests:
  stage: "Test"
  only:
    - schedules
  image:
    name: postman/newman_alpine33
    entrypoint: [""]
  script:
    - npm config set unsafe-perm true
    - npm install -g newman-reporter-html
    - cd postman
    - newman run postman_collection.json -e postman_environment_dev.json -g postman_global_variable.json --reporters cli,html --reporter-html-template html_report_template.hbs --reporter-html-export postman-tests-report.html --suppress-exit-code
  artifacts:
    when: always
    paths:
      - "postman/postman-tests-report.html"
    expire_in: "10 day"

# develop

Sonarcube Tests:
  stage: "Test"
  except:
    - schedules
  only:
    - develop
  needs: []
  script:
    - jabba use system@1.11
    - cat /sys/fs/cgroup/memory/memory.limit_in_bytes
    - java -XX:+PrintFlagsFinal -version | grep -Ei "maxheapsize|maxram"
    - mvn -ntp --fail-at-end clean install
    - mvn sonar:sonar -Dsonar.host.url=${SONAR_HOST} -Dsonar.login=${SONAR_TOKEN}

build_dockerhub_image_develop:
  stage: "Package"
  except:
    - schedules
  only:
    - develop
  variables:
    DOCKER_TAG: develop
  <<: *push_dockerhub_images

deploy_openshift_develop:
  stage: "Deploy"
  except:
    - schedules
  only:
    - develop
  variables:
    DOCKER_TAG: develop # Dockerhub source tag
    OPENSHIFT_NAMESPACE: ${OPENSHIFT_NAMESPACE_DEV} # Openshift target namespace
  <<: *deploy_openshift

#deploy_openshift_banking_gateway_dev:
#  stage: "Deploy"
#  cache: {}
#  dependencies: []
#  only:
#    - develop
#  variables:
#    DOCKER_TAG: develop # Dockerhub source tag
#    OPENSHIFT_NAMESPACE: ${OPENSHIFT_NAMESPACE_BANKING_GATEWAY_DEV} # Openshift target namespace
#  <<: *deploy_openshift

deploy_openshift_dxc_sandbox_dev:
  stage: "Deploy"
  except:
    - schedules
  cache: {}
  dependencies: []
  only:
    - develop
  variables:
    DOCKER_TAG: develop # Dockerhub source tag
    OPENSHIFT_NAMESPACE: ${OPENSHIFT_NAMESPACE_DXC_SANDBOX_DEV} # Openshift target namespace
  <<: *deploy_dxc_openshift

deploy_openshift_bekb_sandbox_dev:
  stage: "Deploy"
  except:
    - schedules
  cache: {}
  dependencies: []
  only:
    - develop
  variables:
    DOCKER_TAG: develop # Dockerhub source tag
    OPENSHIFT_NAMESPACE: ${OPENSHIFT_NAMESPACE_BEKB_SANDBOX_DEV} # Openshift target namespace
  <<: *deploy_dxc_openshift

# nightly

deploy_openshift_nightly:
  stage: "Deploy"
  only:
    - schedules
  variables:
    DOCKER_TAG: develop # Dockerhub source tag
    OPENSHIFT_NAMESPACE: ${OPENSHIFT_NAMESPACE_INTEG} # Openshift target namespace
  <<: *deploy_openshift

deploy_openshift_nightly_e2e_testing:
  stage: "Deploy"
  only:
    - schedules
  variables:
    DOCKER_TAG: develop # Dockerhub source tag
    OPENSHIFT_NAMESPACE: ${OPENSHIFT_NAMESPACE_DEV_E2E} # Openshift target namespace
  <<: *deploy_openshift
# master

build_dockerhub_image_master:
  stage: "Package"
  only:
    - master
  variables:
    DOCKER_TAG: latest
  <<: *push_dockerhub_images

deploy_openshift_demo:
  stage: "Deploy"
  only:
    - master
  variables:
    DOCKER_TAG: latest # Dockerhub source tag
    OPENSHIFT_NAMESPACE: ${OPENSHIFT_NAMESPACE_DEMO} # Openshift target namespace
  <<: *deploy_openshift

#deploy_openshift_banking_gateway_integ:
#  stage: "Deploy"
#  cache: {}
#  dependencies: []
#  only:
#    - master
#  variables:
#    GIT_STRATEGY: none
#    DOCKER_TAG: latest # Dockerhub source tag
#    OPENSHIFT_NAMESPACE: ${OPENSHIFT_NAMESPACE_BANKING_GATEWAY_INTEG} # Openshift target namespace
#  <<: *deploy_openshift

deploy_openshift_aspsp_xs2a_dev:
  stage: "Deploy"
  cache: {}
  dependencies: []
  only:
    - master
  variables:
    GIT_STRATEGY: none
    DOCKER_TAG: latest # Dockerhub source tag
    OPENSHIFT_NAMESPACE: ${OPENSHIFT_NAMESPACE_ASPSP_XS2A_DEV} # Openshift target namespace
  <<: *deploy_openshift_tpp_rest_server

deploy_openshift_open_banking_gateway_dev:
  stage: "Deploy"
  cache: {}
  dependencies: []
  only:
    - master
  variables:
    GIT_STRATEGY: none
    DOCKER_TAG: latest # Dockerhub source tag
    OPENSHIFT_NAMESPACE: ${OPENSHIFT_NAMESPACE_OPEN_BANKING_GATEWAY_DEV} # Openshift target namespace
  <<: *deploy_openshift

# tags

build_dockerhub_images_from_tag:
  stage: "Package"
  only:
    - tags
  variables:
    DOCKER_TAG: ${CI_COMMIT_TAG}
  <<: *push_dockerhub_images
